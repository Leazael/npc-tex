"tableRowChar":
  The tableRowChar object tells us which character will be used to define the rows of the table.
  All occurences of this character (except the first) will be replaced by "\\" during parsing.
  
"commentChar":
  All lines that start with this character, (after the removal of any leading whitespace), are not parsed.
  
"keywordChar":
  The character used to indicate a keyword.
  The keyword is defined as the string of lapha-numerical characters immediately following this character, until the first non-alpha--numerical character.

"keywords" and "environments":
  The "keywords" and "environments" each contain an array of mappings.
  The mappings define the behaviour of the parser. Each mapping must contain 
    -a "match" array that may contain strings and arrays.
    -a "latex" object.
    
"matchList":
  The "matchList" array is used to determine wether a given line matches the mapping.
  Each match of the array can be either a string, or an array of strings. 
  In the case that a match in the matchList is itself an array, such a match is interpreted as a logical "OR", meaning that either of the strings listed may be used. 
  Mathcing is done case-insensitively.
  
  In order for a line to match, it must start (after removing any leadin whitespace) with the first match provided in the matchList. (Possibly augmented by the keywordChar.)
  
  If the mapping is in the "keywords" array, then the line matches if the line contains all exactly those matches specified in the "matchList" array, in the order specified. 
  If the line contains the "tableRowChar", the mapping matches only if "isTable" is set to true. (see optional items below).
  If the line does not contain the "tableRowChar", the mapping matches only if "isTable" is set to false, or if it is absent. (see optional items below).
  Only one such matching can occur.
  
  If the mapping is in the "environments" array, then the line matches if all the entries occur in the line in the order specified. 
  If mulitple mappings match, then the first one is chosen. (i.e., more specific environment-mappings, if placed first, will always supercede more generic environment-mappings placed later in the mappings array)
  
  
  
  A line matching a mapping with N matches is parsed as follows:
    The line is split into N segments, as defined by the matchList array, starting right of the first match and ending on the right of the last match.
    These segments are then cleaned (meaning any trailing/leading whitespace is removed).
    By default the first segment is discarded (but see includeAsInput below)
    The remaining segments are then passed along as input to the LaTeX command. 
    
"latex":
  each "latex" object in the JSON file must contain at least a "command", specifying which latex command will be used in the mapping.
  
  By default, we assume that a latex command has only a single input. 
  
  If the latex command has more than one input, the number must be specified in "nInputs" in the latex object.
  Note that by default the nInputs must equal the number of entries in the mappings match. (Unless "includeInputs", or "isTable" is used, see below)
  
OPTIONAL ITEMS: 

"includeInputs": (Array of Booleans)
  If the latex command takes fewer inputs than the number of matches, or if the text preceding the first match must be counted as input, one must define an "includeInputs" array of booleans. 
  The length of this array must be equal to the number of matches in the matchList
  The inputs corresponding to a true entry will be passed to the latex command, hence the number of trues must match the "nInputs" in the "latex" object.
  
"isPadding" (Array of Strings)
  For the purpose of cleaning the input obtained from this mapping, characters, or strings defined in the "isPadding" array are treated as whitespace.
  
"isTable" 
  Wether the match is interpreted as a table. Everything starting at the "tableRowChar" is considered a separate input.
  
"separators"
  If the corresponding environment or keywords defines a table, one can define an array of separators, of a length equal to the number of columns - 1.
  Each separator can be either a string or an array of strings. In the latter case, we interpret this as a logical "OR" similarly to matchLists
  The first occurence of the first defined separator will be replaced with an "&". The first occurence of the second separtator after the first separator will be also be replaced with an "&". And so on. This process is then repeated for each row of the table. Note that the entire table is to be treated as a single separate input to the latex command.
  
"Description"
  For the purpose of documentation, each mapping object may carry a "description".
  
  
  
    
    
